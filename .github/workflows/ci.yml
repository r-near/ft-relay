name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-lint-test:
    name: Build, Lint, and Test
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:8-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install libudev-dev
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.86.0
          components: clippy

      - name: Cache cargo artifacts
        if: ${{ always() }}
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}

      - name: Cargo build
        run: cargo build --all --locked

      - name: Cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Cargo test
        env:
          REDIS_URL: redis://localhost:6379
        run: cargo test --all --locked -- --test-threads=1

      - name: Cargo test (ignored integration and testnet suites)
        env:
          REDIS_URL: redis://localhost:6379
          # Testnet configuration (maps from GitHub secrets)
          ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
          TOKEN: ${{ secrets.TOKEN }}
          PRIVATE_KEYS: ${{ secrets.PRIVATE_KEYS }}
          RPC_URL: ${{ secrets.RPC_URL }}
          RUST_LOG: info,ft_relay=info,near_api=warn,tracing::span=warn
          RUST_BACKTRACE: 1
        run: |
          set -o pipefail
          cargo test --all --locked -- --ignored --nocapture --test-threads=1 2>&1 | tee benchmark_output.txt

      - name: Extract and display benchmark results
        if: always()
        run: |
          python scripts/benchmark_matrix.py benchmark_output.txt || {
            echo "## Benchmark Results" >> "$GITHUB_STEP_SUMMARY"
            echo >> "$GITHUB_STEP_SUMMARY"
            echo "No benchmark metrics were captured." >> "$GITHUB_STEP_SUMMARY"
          }
